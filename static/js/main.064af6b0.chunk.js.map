{"version":3,"sources":["App.js","index.js"],"names":["App","state","good","neutral","bad","leaveFeedback","event","keyName","currentTarget","name","setState","prevState","countTotalFeedback","countPositiveFeedbackPercentage","Math","round","total","this","positiveFeedback","options","Object","keys","className","map","option","index","type","onClick","toUpperCase","substring","Component","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"uOA2DeA,E,4MAvDbC,MAAQ,CACNC,KAAM,EACNC,QAAS,EACTC,IAAK,G,EAGPC,cAAgB,SAAAC,GACd,IAAMC,EAAUD,EAAME,cAAcC,KACpC,EAAKC,UAAS,SAAAC,GAAS,sBACpBJ,EAAUI,EAAUJ,GAAW,O,EAIpCK,mBAAqB,kBAAM,EAAKX,MAAMC,KAAO,EAAKD,MAAME,QAAU,EAAKF,MAAMG,K,EAE7ES,gCAAkC,kBAAMC,KAAKC,MAAO,EAAKd,MAAMC,KAAO,EAAKU,qBAAwB,M,4CAEnG,WAAU,IAAD,OAEDI,EAAQC,KAAKL,qBACbM,EAAmBD,KAAKJ,kCACxBM,EAAUC,OAAOC,KAAKJ,KAAKhB,OAEjC,OACE,sBAAKqB,UAAU,WAAf,UACE,wDACCH,EAAQI,KAAI,SAACC,EAAQC,GAAT,OACX,wBAAQC,KAAK,SAASjB,KAAMe,EAAoBG,QAAS,EAAKtB,cAA9D,SACGmB,EAAO,GAAGI,cAAgBJ,EAAOK,UAAU,IADLJ,MAK3C,4CACA,6BACGN,EAAQI,KAAI,SAACC,EAAQC,GAAT,OACX,+BACGD,EAAO,GAAGI,cAAgBJ,EAAOK,UAAU,GAD9C,IACmD,EAAK5B,MAAMuB,KADrDC,QAYb,wCAAWT,EAAX,OACA,oDAAuBE,EAAvB,c,GAjDUY,aCIlBC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.064af6b0.chunk.js","sourcesContent":["import { Component } from 'react';\n// import shortid from 'shortid';\n\nclass App extends Component {\n  state = {\n    good: 0,\n    neutral: 0,\n    bad: 0,\n  };\n\n  leaveFeedback = event => {\n    const keyName = event.currentTarget.name;\n    this.setState(prevState => ({\n      [keyName]: prevState[keyName] + 1,\n    }));\n  };\n\n  countTotalFeedback = () => this.state.good + this.state.neutral + this.state.bad;\n\n  countPositiveFeedbackPercentage = () => Math.round((this.state.good / this.countTotalFeedback()) * 100);\n\n  render() {\n    // const { good, neutral, bad } = this.state;\n    const total = this.countTotalFeedback();\n    const positiveFeedback = this.countPositiveFeedbackPercentage();\n    const options = Object.keys(this.state);\n\n    return (\n      <div className=\"Feedback\">\n        <h1>Please leave Feedback </h1>\n        {options.map((option, index) => (\n          <button type=\"button\" name={option} key={index} onClick={this.leaveFeedback}>\n            {option[0].toUpperCase() + option.substring(1)}\n          </button>\n        ))}\n\n        <h1>Statistics</h1>\n        <ul>\n          {options.map((option, index) => (\n            <li key={index}>\n              {option[0].toUpperCase() + option.substring(1)}:{this.state[option]}\n            </li>\n          ))}\n        </ul>\n\n        {/* <ul>\n          <li> Good:{good} </li>\n          <li> Neutral:{neutral}</li>\n          <li> Bad: {bad}</li>\n        </ul>\n        <ul> */}\n        <p> Total:{total} </p>\n        <p> Positive feedback:{positiveFeedback}%</p>\n        {/* </ul> */}\n      </div>\n    );\n  }\n}\n\nexport default App;\n","import 'modern-normalize/modern-normalize.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root'),\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}